import React, { useEffect, useRef, useState } from "react";
import {
  apiTextToSpeech,
  apiSpeechToText,
  apiSignToText,
} from "../services/api";
import "./Translator.css";

const LANGUAGES = [
  { code: "en", label: "English" },
  { code: "hi", label: "Hindi" },
  { code: "mr", label: "Marathi" },
  { code: "bn", label: "Bengali" },
  { code: "ta", label: "Tamil" },
  { code: "te", label: "Telugu" },
  { code: "kn", label: "Kannada" },
  { code: "ml", label: "Malayalam" },
  // add more as needed
];

export default function Translator() {
  const [leftLang, setLeftLang] = useState("en");
  const [rightLang, setRightLang] = useState("hi");
  const [leftText, setLeftText] = useState("");
  const [rightText, setRightText] = useState("");
  const [audioUrl, setAudioUrl] = useState("");
  const [loading, setLoading] = useState(false);
  const leftFileRef = useRef(null);
  const rightFileRef = useRef(null);

  useEffect(() => {
    // clear audio when leftText changes
    setAudioUrl("");
  }, [leftText]);

  const swap = () => {
    setLeftLang(rightLang);
    setRightLang(leftLang);
    setLeftText(rightText);
    setRightText(leftText);
    setAudioUrl("");
  };

  // Play audio returned from backend or generated by browser
  const playAudioFromUrl = (url) => {
    if (!url) return;
    const a = new Audio(url);
    a.play().catch((e) => console.warn("Autoplay blocked", e));
  };

  // Download audio (link)
  const downloadAudio = (url) => {
    if (!url) return;
    const a = document.createElement("a");
    a.href = url;
    a.download = "vachaka_tts.mp3";
    document.body.appendChild(a);
    a.click();
    a.remove();
  };

  // Copy translated text
  const copyRightText = async () => {
    try {
      await navigator.clipboard.writeText(rightText);
      alert("Copied to clipboard");
    } catch {
      alert("Copy failed");
    }
  };

  // Use backend TTS for right panel (when user clicks speaker icon)
  const handleRightPlay = async () => {
    if (!rightText?.trim()) {
      alert("No text to speak");
      return;
    }

    setLoading(true);
    try {
      const resp = await apiTextToSpeech(rightText);
      // resp.audio_url may be relative path from backend
      const url =
        resp.audio_url?.startsWith("http")
          ? resp.audio_url
          : `${window.location.protocol}//${window.location.hostname}:${window.location.port && window.location.port !== "3000" ? window.location.port : "8000"}${resp.audio_url}`;
      // Safer: use full base from API if available
      // Prefer use as-is if it's absolute
      // But most backend returns full URL or relative path; adapt as necessary
      // If resp.audio_url is full, use it
      setAudioUrl(url);
      playAudioFromUrl(url);
    } catch (err) {
      console.error(err);
      // fallback to browser TTS
      if ("speechSynthesis" in window) {
        const u = new SpeechSynthesisUtterance(rightText);
        u.lang = rightLang;
        window.speechSynthesis.speak(u);
      } else {
        alert("TTS failed and no browser TTS available");
      }
    } finally {
      setLoading(false);
    }
  };

  // Left upload audio -> speech->text
  const handleLeftAudioUpload = async (ev) => {
    const file = ev.target.files?.[0];
    if (!file) return;
    setLoading(true);
    try {
      const res = await apiSpeechToText(file);
      setLeftText(res.text || "");
    } catch (err) {
      console.error(err);
      alert("Speech->Text failed");
    } finally {
      setLoading(false);
      leftFileRef.current.value = "";
    }
  };

  // Left upload sign video -> sign->text
  const handleLeftSignUpload = async (ev) => {
    const file = ev.target.files?.[0];
    if (!file) return;
    setLoading(true);
    try {
      const res = await apiSignToText(file);
      setLeftText(res.text || "");
    } catch (err) {
      console.error(err);
      alert("Sign->Text failed");
    } finally {
      setLoading(false);
      leftFileRef.current.value = "";
    }
  };

  // Fake translate: For now we copy left to right and mark language; replace with real translate API later
  const handleTranslate = async () => {
    // If you have a translate API, call it here with leftText, leftLang, rightLang
    // For demo, just copy and show placeholder
    if (!leftText.trim()) {
      setRightText("");
      return;
    }
    setLoading(true);
    try {
      // TODO: call translate API here
      // demo behaviour: prefix with language code
      const simulated = leftText;
      setRightText(simulated);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="translate-root">
      <div className="translate-toolbar">
        <div className="lang-select left">
          <select value={leftLang} onChange={(e) => setLeftLang(e.target.value)}>
            {LANGUAGES.map((l) => (
              <option key={l.code} value={l.code}>
                {l.label}
              </option>
            ))}
          </select>
        </div>

        <div className="toolbar-actions">
          <button className="swap-btn" onClick={swap} title="Swap languages">
            â‡„
          </button>
          <button className="translate-btn" onClick={handleTranslate} disabled={loading}>
            {loading ? "Translatingâ€¦" : "Translate"}
          </button>
        </div>

        <div className="lang-select right">
          <select value={rightLang} onChange={(e) => setRightLang(e.target.value)}>
            {LANGUAGES.map((l) => (
              <option key={l.code} value={l.code}>
                {l.label}
              </option>
            ))}
          </select>
        </div>
      </div>

      <div className="panels">
        {/* LEFT PANEL */}
        <div className="panel left-panel">
          <div className="panel-header">
            <div className="panel-title">Source</div>
            <div className="panel-actions">
              <label className="upload-label">
                ðŸŽ¤
                <input ref={leftFileRef} type="file" accept="audio/*" onChange={handleLeftAudioUpload} hidden />
              </label>
              <label className="upload-label">
                ðŸŽ¥
                <input ref={leftFileRef} type="file" accept="video/*" onChange={handleLeftSignUpload} hidden />
              </label>
            </div>
          </div>

          <textarea
            className="panel-textarea"
            placeholder="Type or paste text, or upload audio/video"
            value={leftText}
            onChange={(e) => setLeftText(e.target.value)}
          />

          <div className="panel-footer">
            <div className="footer-left">
              <button className="small-btn" onClick={() => { setLeftText(""); setRightText(""); }}>
                Clear
              </button>
            </div>
            <div className="footer-right">
              <div className="muted">Detected: {leftLang}</div>
            </div>
          </div>
        </div>

        {/* RIGHT PANEL */}
        <div className="panel right-panel">
          <div className="panel-header">
            <div className="panel-title">Translation</div>
            <div className="panel-actions">
              <button className="icon-btn" onClick={copyRightText} title="Copy">
                ðŸ“‹
              </button>
              <button className="icon-btn" onClick={handleRightPlay} title="Play">
                ðŸ”Š
              </button>
              <button className="icon-btn" onClick={() => downloadAudio(audioUrl)} title="Download">
                â¤“
              </button>
            </div>
          </div>

          <div className="panel-output">
            {rightText ? (
              <pre className="output-text">{rightText}</pre>
            ) : (
              <div className="placeholder">Translation will appear here</div>
            )}
          </div>

          <div className="panel-footer">
            <div className="footer-left">
              <button className="small-btn" onClick={() => setRightText("")}>
                Clear
              </button>
            </div>
            <div className="footer-right">
              <div className="muted">Target: {rightLang}</div>
            </div>
          </div>
        </div>
      </div>

      {/* Hidden audio element if you want to play via element */}
      {audioUrl && (
        <audio id="vachaka-player" src={audioUrl} style={{ display: "none" }} />
      )}
    </div>
  );
}
